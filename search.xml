<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java动态代理</title>
      <link href="/amos.github.io/2019/01/03/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/amos.github.io/2019/01/03/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>什么是动态代理？<br>要理解动态代理的话，先了解下什么是代理，打个比方，比如说你要去处理某件事情，这件事情很急，但是你又抽不出时间，你可以请别人帮你处理下，这里的你自己就是被代理方，别人就是代理方，这个就是代理，代理你去做某件事。</p></blockquote><p>在Java中有个设计模式是代理模式，这里说的就是代理，不过对应的动态代理，既然有动态代理的话，肯定就有静态代理了。<br>代理模式一般有四个部分组成</p><ul><li><p>抽象主题角色</p><p>  定义具体主题角色和代理主题角色的共有行为</p></li><li><p>具体主题角色</p><p>  被代理方，是业务逻辑的具体执行者</p></li><li><p>代理主题角色</p><p>  代理方，负责对主题角色的调用，把所有抽象主题角色定义的方法限制委托给具体主题角色实现,并且可以在真实主题角色处理完毕前后做预处理和善后处理工作</p></li><li>调用者<br>  是执行代理主题角色的类（相当于测试用例，负责调用）</li></ul><p>静态代理比较简单，我们理解一下概念即可，在实际的运用过程中很少用到。</p><blockquote><p>静态代理：在编译时就已经将代理类确定的就是静态代理<br><br>动态代理：在程序运行时创建代理类的方式就是动态代理</p></blockquote><blockquote><p>Java的动态代理目前有两种实现的方式：原生动态代理和CGLIB动态代理两种</p><ol><li>java实现动态代理（基于接口）</li></ol></blockquote><p><strong>实现InvocationHandler接口，方法调用会被转发到该类的invoke() 方法上</strong></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br>    * <span class="hljs-doctag">@author</span> Amos<br>    * <span class="hljs-doctag">@ClassName</span> HelloProxy<br>    * <span class="hljs-doctag">@Description</span> 实现InvocationHandler接口，方法调用会被转发到该类的invoke() 方法上<br>    * <span class="hljs-doctag">@Date</span> 2018/11/20 19:37<br>    * <span class="hljs-doctag">@VERSION</span> 1.0<br>    **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Hello hello;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HelloProxy</span><span class="hljs-params">(Hello hello)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.hello = hello;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">"say"</span>.equals(method.getName()))&#123;<br>            System.out.println(<span class="hljs-string">"you say:"</span>+ Arrays.toString(args));<br>        &#125;<br>        <span class="hljs-keyword">return</span> method.invoke(hello,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用jdk动态代理获取代理对象</strong></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br>    * loader: 指定代理对象的类加载器<br>    * interfaces: 代理对象需要实现的接口，可以同时指定多个接口<br>    * handler: 方法调用的实际处理者，代理对象的方法调用都会转发到这里<br>    */</span><br>Hello hello = (Hello)Proxy.newProxyInstance(HelloProxy.class.getClassLoader(),<span class="hljs-keyword">new</span> Class&lt;?&gt;[]&#123;Hello.class&#125;,<br>        <span class="hljs-keyword">new</span> HelloProxy(<span class="hljs-keyword">new</span> HelloImpl()));<br>System.out.println(hello.say(<span class="hljs-string">"amos's code"</span>));<br></code></pre></td></tr></table></figure><ol start="2"><li>CGLIB动态代理（通过继承方式来实现） </li></ol><p><strong>实现MethodInterceptor，方法调用会被转发到该类的intercept()方法上</strong></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br>* <span class="hljs-doctag">@author</span> Amos<br>* <span class="hljs-doctag">@ClassName</span> MyMethodInteceptor<br>* <span class="hljs-doctag">@Description</span> 实现MethodInterceptor,方法调用会被转发到该类的intercept()方法上<br>* <span class="hljs-doctag">@Date</span> 2018/11/20 20:13<br>* <span class="hljs-doctag">@VERSION</span> 1.0<br>**/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMethodInteceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">"the params:"</span>+ Arrays.toString(objects));<br>        <span class="hljs-keyword">return</span> methodProxy.invokeSuper(o,objects);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通过CGLIB动态代理获取代理对象</strong></p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br>* 通过Enhancer来指定要代理的目标对象，实际处理代理逻辑的对象，再通过create()方法获取代理对象<br>*/</span><br>Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer();<br>enhancer.setSuperclass(Me.class);<br>enhancer.setCallback(<span class="hljs-keyword">new</span> MyMethodInteceptor());<br><span class="hljs-comment">/**<br>* 该对象的所有的非final方法的调用对会转发给MyMethodInteceptor.intercept(),<br>*/</span><br>Me me = (Me) enhancer.create();<br>System.out.println(me.say(<span class="hljs-string">"world"</span>));<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
            <tag> CGLIB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/amos.github.io/2018/12/27/hello-world/"/>
      <url>/amos.github.io/2018/12/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
